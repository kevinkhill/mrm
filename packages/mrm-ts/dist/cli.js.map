{"version":3,"sources":["../src/cli.ts","../src/constants.ts","../src/errors.ts","../src/index.ts","../src/lib/taskRunner.ts","../src/lib/collector.ts","../src/lib/npxResolver.ts","../src/lib/console.ts","../src/lib/promises.ts","../src/lib/utils.ts","../src/lib/config.ts","../src/lib/toNaturalList.ts","../src/lib/updater.ts"],"sourcesContent":["#!/usr/bin/env node\n\nimport kleur from \"kleur\";\nimport { random } from \"middleearth-names\";\nimport minimist from \"minimist\";\nimport ora from \"ora\";\n\nimport { CONFIG_FILENAME, DEFAULT_DIRECTORIES, EXAMPLES } from \"./constants\";\nimport {\n\tisInvalidTaskError,\n\tisUndefinedOptionError,\n\tisUnknownAliasError,\n\tisUnknownTaskError,\n} from \"./errors\";\nimport { mrmDebug } from \"./index\";\nimport {\n\tgetAllTasks,\n\tgetConfig,\n\tlongest,\n\tprintError,\n\tresolveDirectories,\n\trun,\n\trunUpdater,\n\ttoNaturalList,\n} from \"./lib\";\nimport type { CliArgs, TaskRecords } from \"./types/mrm\";\n\nexport const cliDebug = mrmDebug.extend(\"cli\");\n\n/**\n * mrm, the cli tool\n */\nasync function main() {\n\tconst spinner = ora(\"Loading mrm\");\n\tconst debug = cliDebug;\n\tconst argv: CliArgs = minimist(process.argv.slice(2), {\n\t\talias: {\n\t\t\ti: \"interactive\",\n\t\t},\n\t\tboolean: [\"silent\", \"verbose\"],\n\t});\n\n\tdebug(\"argv = %O\", argv);\n\n\tif (!mrmDebug.enabled) {\n\t\tspinner.start();\n\t}\n\n\t// Collect positional args as tasks to run\n\tconst tasks = argv._;\n\n\t// How are we executing\n\tconst binaryPath = process.env._;\n\tconst binaryName =\n\t\tbinaryPath && binaryPath.endsWith(\"/npx\") ? \"npx mrm\" : \"mrm\";\n\n\t// Preset\n\tconst preset = argv.preset || \"default\";\n\tconst isDefaultPreset = preset === \"default\";\n\n\tspinner.color = \"cyan\";\n\tspinner.text = \"mrm: Fetching the default preset\";\n\tconst directories = await resolveDirectories(\n\t\tDEFAULT_DIRECTORIES,\n\t\tpreset,\n\t\targv.dir\n\t);\n\tdebug(\"Resolved Directories: %O\", directories);\n\n\tconst options = await getConfig(directories, argv);\n\tdebug(\"Parsed Options: %O\", options);\n\n\tconst allTasks = await getAllTasks(directories, options);\n\tdebug(\"Collected Tasks: %O\", allTasks);\n\n\tif (argv[\"view-config\"]) {\n\t\tconsole.log(\"\\n\", kleur.yellow().underline(\"Tasks\"), \"\\n\");\n\t\tconsole.log(tasks);\n\t\tconsole.log(\"\\n\", kleur.yellow().underline(\"Directories\"), \"\\n\");\n\t\tconsole.log(directories);\n\t\tconsole.log(\"\\n\", kleur.yellow().underline(\"Options\"), \"\\n\");\n\t\tconsole.log(options);\n\t\treturn;\n\t}\n\n\tif (tasks.length === 0 || tasks[0] === \"help\") {\n\t\tspinner.stopAndPersist();\n\t\tcommandHelp(binaryName, allTasks);\n\t\treturn;\n\t}\n\n\ttry {\n\t\tspinner.succeed(\"Done.\");\n\t\tawait run(tasks, directories, options, argv);\n\t} catch (err: unknown) {\n\t\tif (isUnknownAliasError(err)) {\n\t\t\tprintError(err.message);\n\t\t} else if (isUnknownTaskError(err)) {\n\t\t\tconst { taskName } = err.extra;\n\t\t\tif (isDefaultPreset) {\n\t\t\t\tconst modules = directories\n\t\t\t\t\t.slice(0, -1)\n\t\t\t\t\t.map(d => `${d}/${taskName}/index.js`)\n\t\t\t\t\t.concat([\n\t\t\t\t\t\t`\"${taskName}\" in the default mrm tasks`,\n\t\t\t\t\t\t`mrm-task-${taskName} package in local node_modules`,\n\t\t\t\t\t\t`${taskName} package in local node_modules`,\n\t\t\t\t\t\t`mrm-task-${taskName} package on the npm registry`,\n\t\t\t\t\t\t`${taskName} package on the npm registry`,\n\t\t\t\t\t]);\n\t\t\t\tprintError(\n\t\t\t\t\t`${err.message}\n\nWe've tried these locations:\n\n- ${modules.join(\"\\n- \")}`\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tprintError(`Task \"${taskName}\" not found in the \"${preset}\" preset.\n\nNote that when a preset is specified no default search locations are used.`);\n\t\t\t}\n\t\t} else if (isInvalidTaskError(err)) {\n\t\t\tprintError(`${err.message}\n\nMake sure your task module exports a function.`);\n\t\t} else if (isUndefinedOptionError(err)) {\n\t\t\tconst { unknown } = err.extra;\n\t\t\tconst values = unknown.map(name => [name, random()]);\n\t\t\tconst configList = toNaturalList(unknown);\n\t\t\tconst heading = `Required config options are missed: ${configList}.`;\n\t\t\tconst cliHelp = `  ${binaryName} ${tasks.join(\" \")} ${values\n\t\t\t\t.map(([n, v]) => `--config:${n} \"${v}\"`)\n\t\t\t\t.join(\" \")}`;\n\t\t\tif (isDefaultPreset) {\n\t\t\t\tconst userDirectories = directories.slice(0, -1);\n\t\t\t\tprintError(\n\t\t\t\t\t`${heading}\n\n1. Create a \"${CONFIG_FILENAME}\" file:\n\n{\n${values.map(([n, v]) => `  \"${n}\": \"${v}\"`).join(\",\\n\")}\n}\n\nIn one of these folders:\n\n- ${userDirectories.join(\"\\n- \")}\n\n2. Or pass options via command line:\n\n${cliHelp}\n\t`\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tprintError(\n\t\t\t\t\t`${heading}\n\nYou can pass the option via command line:\n\n${cliHelp}\n\nNote that when a preset is specified no default search locations are used.`\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tthrow err;\n\t\t}\n\t}\n}\n\n/**\n * Build and output for the command help for `mrm`\n */\nfunction commandHelp(binaryName: string, allTasks: TaskRecords) {\n\tconsole.log(\n\t\t[\n\t\t\tkleur.underline(\"Usage\"),\n\t\t\tgetUsage(binaryName, EXAMPLES),\n\t\t\tkleur.underline(\"Available tasks\"),\n\t\t\tbuildTasksList(allTasks),\n\t\t].join(\"\\n\\n\")\n\t);\n\tconsole.log(\"\\n\");\n}\n\n/**\n * Get a pretty printed explanation of how to use `mrm`\n */\nfunction getUsage(binaryName: string, examples: string[][]): string {\n\tconst commands = examples.map(x => x.join(\"\"));\n\tconst commandsWidth = longest(commands).length;\n\n\treturn examples\n\t\t.map(([command, opts, description]) =>\n\t\t\t[\n\t\t\t\t\"   \",\n\t\t\t\tkleur.bold(binaryName),\n\t\t\t\tkleur.cyan(command),\n\t\t\t\tkleur.yellow(opts),\n\t\t\t\t\"\".padEnd(commandsWidth - (command + opts).length),\n\t\t\t\tdescription && `# ${description}`,\n\t\t\t].join(\" \")\n\t\t)\n\t\t.join(\"\\n\");\n}\n\n/**\n * Build a list of all the tasks and how they run\n */\nfunction buildTasksList(allTasks: TaskRecords) {\n\tconst names = Object.keys(allTasks).sort();\n\tconst nameColWidth = names.length > 0 ? longest(names).length : 0;\n\n\treturn names\n\t\t.map(name => {\n\t\t\tconst description = Array.isArray(allTasks[name])\n\t\t\t\t? `Runs ${toNaturalList(allTasks[name])}`\n\t\t\t\t: allTasks[name];\n\t\t\treturn (\n\t\t\t\t\"    \" + kleur.cyan(name.padEnd(nameColWidth)) + \"  \" + description\n\t\t\t);\n\t\t})\n\t\t.join(\"\\n\");\n}\n\n/**\n * Catch unhandled errors potentially thrown by tasks?\n */\nprocess.on(\"unhandledRejection\", (err: Error) => {\n\t// if (String(err.constructor.name).startsWith('Mrm')) {\n\tcliDebug(\"ERROR\");\n\tcliDebug(err);\n\tprintError(err.message);\n\tprocess.exit(1);\n\t// } else {\n\t// \tthrow err;\n\t// }\n});\n\nrunUpdater();\nmain();\n","import envPaths from \"env-paths\";\nimport { homedir } from \"node:os\";\nimport path from \"node:path\";\n\n/**\n * Filename for mrm configuration\n */\nexport const CONFIG_FILENAME = \"config.json\";\n\n/**\n * Configuration for the degit resolver\n */\nexport const DEGIT_USE_FORCE = true;\nexport const DEGIT_USE_CACHE = true;\n\n/**\n * Default Directories for mrm tasks and config\n */\nexport const DEFAULT_DIRECTORIES = [\n\tpath.resolve(homedir(), \"dotfiles/mrm\"),\n\tpath.resolve(homedir(), \".mrm\"),\n];\n\n/**\n * Path to mrm's local task cache\n */\nexport const TASK_CACHE_DIR = envPaths(\"mrm\", { suffix: \"tasks\" }).cache;\n\n/**\n * CLI examples\n */\nexport const EXAMPLES = [\n\t[\"\", \"\", \"List of available tasks\"],\n\t[\"<task>\", \"\", \"Run a task or an alias\"],\n\t[\"<task>\", \"--dir ~/unicorn\", \"Custom config and tasks folder\"],\n\t[\"<task>\", \"--preset unicorn\", \"Load config and tasks from a preset\"],\n\t[\n\t\t\"<task>\",\n\t\t\"--config:foo coffee --config:bar pizza\",\n\t\t\"Override config options\",\n\t],\n];\n","interface ExtraRecordTaskName {\n\ttaskName: string | string[];\n}\n\ninterface ExtraRecordUnknown {\n\tunknown: string[];\n}\n\nexport class MrmBaseError extends Error {\n\tdeclare extra?: ExtraRecordTaskName | ExtraRecordUnknown;\n\tconstructor(message: string, extra?: MrmBaseError[\"extra\"]) {\n\t\tsuper(message);\n\t\tthis.name = this.constructor.name;\n\t\tthis.extra = extra;\n\t}\n}\n\nexport class MrmUnknownAlias extends MrmBaseError {\n\tconstructor(message: string) {\n\t\tsuper(message);\n\t\tthis.name = this.constructor.name;\n\t}\n}\n\nexport class MrmUnknownTask extends MrmBaseError {\n\tdeclare extra: ExtraRecordTaskName;\n\tconstructor(message: string, extra?: ExtraRecordTaskName) {\n\t\tsuper(message);\n\t\tthis.name = this.constructor.name;\n\t\tif (extra) {\n\t\t\tthis.extra = extra;\n\t\t}\n\t}\n}\n\nexport class MrmInvalidTask extends MrmBaseError {\n\tconstructor(message: string, extra?: ExtraRecordTaskName) {\n\t\tsuper(message);\n\t\tthis.name = this.constructor.name;\n\t\tthis.extra = extra;\n\t}\n}\n\nexport class MrmUndefinedOption extends MrmBaseError {\n\tdeclare extra: ExtraRecordUnknown;\n\tconstructor(message: string, extra?: ExtraRecordUnknown) {\n\t\tsuper(message);\n\t\tthis.name = this.constructor.name;\n\t\tif (extra) {\n\t\t\tthis.extra = extra;\n\t\t}\n\t}\n}\n\n/**\n * Type guard for `MrmUnknownAlias`\n */\nexport function isUnknownAliasError(err: unknown): err is MrmUnknownAlias {\n\treturn (err as MrmBaseError).constructor === MrmUnknownAlias;\n}\n\n/**\n * Type guard for `MrmUnknownTask`\n */\nexport function isUnknownTaskError(err: unknown): err is MrmUnknownTask {\n\treturn (err as MrmBaseError).constructor === MrmUnknownTask;\n}\n\n/**\n * Type guard for `MrmInvalidTask`\n */\nexport function isInvalidTaskError(err: unknown): err is MrmInvalidTask {\n\treturn (err as MrmBaseError).constructor === MrmInvalidTask;\n}\n\n/**\n * Type guard for `MrmUndefinedOption`\n */\nexport function isUndefinedOptionError(\n\terr: unknown\n): err is MrmUndefinedOption {\n\treturn (err as MrmBaseError).constructor === MrmUndefinedOption;\n}\n","import Debug from \"debug\";\n\nexport const mrmDebug = Debug(\"mrm\");\n\nexport * from \"./lib/taskRunner\";\n","import inquirer from \"inquirer\";\nimport kleur from \"kleur\";\nimport { createRequire } from \"node:module\";\n\nimport {\n\tMrmInvalidTask,\n\tMrmUndefinedOption,\n\tMrmUnknownAlias,\n\tMrmUnknownTask,\n} from \"../errors\";\nimport type { CliArgs, MrmOptions, MrmTask } from \"../types/mrm\";\nimport { getAllAliases, isValidAlias } from \"./collector\";\nimport { resolveUsingNpx } from \"./npxResolver\";\nimport { promiseFirst, promiseSeries } from \"./promises\";\nimport { getPackageName, tryFile } from \"./utils\";\n\n/* Return the functionality of `require` from commonjs */\nconst require = createRequire(import.meta.url);\n\n/**\n * Run a task.\n */\nexport function run(\n\ttaskList: string | string[],\n\tdirectories: string[],\n\toptions: MrmOptions,\n\targv: CliArgs\n): Promise<any> {\n\tif (Array.isArray(taskList)) {\n\t\treturn promiseSeries(taskList, task => {\n\t\t\treturn run(task, directories, options, argv);\n\t\t});\n\t}\n\n\tconst task = taskList;\n\tif (isValidAlias(task, options)) {\n\t\treturn runAlias(task, directories, options, argv);\n\t}\n\n\treturn runTask(task, directories, options, argv);\n}\n\n/**\n * Run an alias.\n */\nexport async function runAlias(\n\taliasName: string,\n\tdirectories: string[],\n\toptions: MrmOptions,\n\targv: CliArgs\n): Promise<any> {\n\tconst tasks = getAllAliases(options)[aliasName];\n\n\tif (!tasks) {\n\t\tthrow new MrmUnknownAlias(`Alias \"${aliasName}\" not found.`);\n\t}\n\n\tconsole.log(kleur.yellow(`Running alias ${aliasName}...`));\n\n\treturn promiseSeries(tasks, name => {\n\t\tconst runner = isValidAlias(name, options) ? runAlias : runTask;\n\n\t\treturn runner(name, directories, options, argv);\n\t});\n}\n\n/**\n * Run a task.\n */\nexport async function runTask(\n\ttaskName: string,\n\tdirectories: string[],\n\toptions: MrmOptions,\n\targv: CliArgs\n): Promise<string> {\n\tconst taskPackageName = getPackageName(\"task\", taskName);\n\n\tlet modulePath: string | null;\n\ttry {\n\t\tmodulePath = await promiseFirst([\n\t\t\t() => tryFile(directories, `${taskName}/index.js`),\n\t\t\t() => require.resolve(taskPackageName),\n\t\t\t() => resolveUsingNpx(taskPackageName),\n\t\t\t() => require.resolve(taskName),\n\t\t\t() => resolveUsingNpx(taskName),\n\t\t]);\n\t} catch {\n\t\tmodulePath = null;\n\t}\n\n\treturn new Promise((resolve, reject) => {\n\t\tif (!modulePath) {\n\t\t\treject(\n\t\t\t\tnew MrmUnknownTask(`Task \"${taskName}\" not found.`, {\n\t\t\t\t\ttaskName,\n\t\t\t\t})\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tconst module = require(modulePath);\n\t\tif (typeof module !== \"function\") {\n\t\t\treject(\n\t\t\t\tnew MrmInvalidTask(`Cannot call task \"${taskName}\".`, { taskName })\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tconsole.log(kleur.cyan(`Running ${taskName}...`));\n\n\t\tPromise.resolve(getTaskOptions(module, argv.interactive, options))\n\t\t\t.then(config => module(config, argv))\n\t\t\t.then(resolve)\n\t\t\t.catch(reject);\n\t});\n}\n\n/**\n * Get task specific options, either by running Inquirer.js in interactive mode,\n * or using defaults.\n */\nasync function getTaskOptions(\n\ttask: MrmTask,\n\tinteractive = false,\n\toptions: Partial<MrmOptions> = {}\n): Promise<Partial<MrmOptions>> {\n\t// If no parameters set, resolve to default options (from config file or command line).\n\tif (!task.parameters) {\n\t\treturn options;\n\t}\n\n\tconst parameters = Object.entries(task.parameters);\n\n\tconst allOptions = await Promise.all(\n\t\tparameters.map(async ([name, param]) => ({\n\t\t\t...param,\n\t\t\tname,\n\t\t\tdefault:\n\t\t\t\t// Merge available default options with parameter initial values\n\t\t\t\ttypeof options[name] !== \"undefined\"\n\t\t\t\t\t? options[name]\n\t\t\t\t\t: typeof param.default === \"function\"\n\t\t\t\t\t? await param.default(options)\n\t\t\t\t\t: param.default,\n\t\t}))\n\t);\n\n\t// Split interactive and static options\n\tconst prompts = allOptions.filter(\n\t\toption => interactive && option.type !== \"config\"\n\t);\n\tconst statics = allOptions.filter(i => prompts.indexOf(i) > -1);\n\n\t// Validate static options\n\tconst invalid = statics.filter(param =>\n\t\tparam.validate ? param.validate(param.default) !== true : false\n\t);\n\n\tif (invalid.length > 0) {\n\t\tconst names = invalid.map(({ name }) => name);\n\t\tthrow new MrmUndefinedOption(\n\t\t\t`Missing required config options: ${names.join(\", \")}.`,\n\t\t\t{\n\t\t\t\tunknown: names,\n\t\t\t}\n\t\t);\n\t}\n\n\t// Run Inquirer.js with interactive options\n\tconst answers = prompts.length > 0 ? await inquirer.prompt(prompts) : {};\n\n\t// Merge answers with static defaults\n\tconst values: Partial<MrmOptions> = { ...answers };\n\n\tfor (const param of statics) {\n\t\tvalues[param.name] = param.default;\n\t}\n\n\treturn values;\n}\n","import glob from \"glob\";\nimport kleur from \"kleur\";\nimport { createRequire } from \"node:module\";\nimport path from \"path\";\n\nimport { mrmDebug } from \"../index\";\nimport type { MrmOptions } from \"../types/mrm\";\n\n// Return the functionality of `require` from commonjs\nconst require = createRequire(import.meta.url);\n\n/**\n * Get all aliases from the options\n */\nexport function getAllAliases(options: MrmOptions): MrmOptions[\"aliases\"] {\n\treturn options.aliases ?? {};\n}\n\n/**\n * Check if a alias is a valid\n */\nexport function isValidAlias(alias: string, options: MrmOptions): boolean {\n\treturn Object.hasOwn(getAllAliases(options), alias);\n}\n\n/**\n * Return all task and alias names and descriptions from all search directories.\n */\nexport async function getAllTasks(\n\tdirectories: string[],\n\toptions: Partial<MrmOptions>\n): Promise<Record<string, string[]>> {\n\tconst debug = mrmDebug.extend(\"taskCollector\");\n\n\tconst allTasks = options.aliases ?? {};\n\n\tdebug(\"searching dirs: %O\", directories);\n\n\tfor (const dir of directories) {\n\t\tdebug(\"entering: %s\", kleur.yellow(dir));\n\n\t\tconst tasks = glob.sync(`${dir}/*/index.js`);\n\n\t\tdebug(\"\\\\ task count: %s\", kleur.bold().yellow(tasks.length));\n\n\t\tfor (const filename of tasks) {\n\t\t\tconst taskName = path.basename(path.dirname(filename));\n\n\t\t\tdebug(\" | %s\", kleur.green(taskName));\n\n\t\t\tif (!allTasks[taskName]) {\n\t\t\t\tconst module = require(filename);\n\t\t\t\tallTasks[taskName] = module.description || \"\";\n\t\t\t}\n\t\t}\n\t}\n\n\treturn allTasks;\n}\n","import kleur from \"kleur\";\nimport npx from \"libnpx\";\nimport { lstat } from \"node:fs/promises\";\nimport { createRequire } from \"node:module\";\nimport path from \"node:path\";\nimport which from \"which\";\n\nimport { mrmDebug } from \"../index\";\nimport { printError } from \"./console\";\nimport { promiseFirst } from \"./promises\";\nimport { getPackageName } from \"./utils\";\n\nconst NPX_RESOLVER_QUIET = true;\n\n// Return the functionality of `require` from commonjs\nconst require = createRequire(import.meta.url);\n\n/**\n * Resolve a set of directories using npx\n */\nexport async function resolveDirectories(\n\tpaths: string[],\n\tpreset: string,\n\tcustomDir?: string\n): Promise<string[]> {\n\t// Custom config / tasks directory\n\tif (customDir) {\n\t\tconst resolvedDir = path.resolve(customDir);\n\t\tconst stat = await lstat(resolvedDir);\n\n\t\tif (stat.isDirectory()) {\n\t\t\tprintError(`Directory \"${resolvedDir}\" not found.`);\n\t\t\tprocess.exit(1);\n\t\t}\n\n\t\tpaths.unshift(resolvedDir);\n\t}\n\n\tconst presetPackageName = getPackageName(\"preset\", preset);\n\ttry {\n\t\tconst presetPath = await promiseFirst([\n\t\t\t() => require.resolve(presetPackageName),\n\t\t\t() => require.resolve(preset),\n\t\t\t() => resolveUsingNpx(presetPackageName),\n\t\t\t() => resolveUsingNpx(preset),\n\t\t]);\n\t\treturn [...paths, path.dirname(presetPath)];\n\t} catch {\n\t\tprintError(`Preset \"${preset}\" not found.\n\n\tWe've tried to load \"${presetPackageName}\" and \"${preset}\" npm packages.`);\n\t\tprocess.exit(1);\n\t}\n}\n\n/**\n * Resolve a module on-the-fly using npx under the hood\n */\nexport async function resolveUsingNpx(packageName: string): Promise<string> {\n\tconst debug = mrmDebug.extend(\"npxResolver\");\n\tconst npm = await which(\"npm\");\n\n\tdebug(`npx._ensurePackages('%s')`, packageName);\n\tconst { prefix } = await npx._ensurePackages(packageName, {\n\t\tnpm,\n\t\tq: NPX_RESOLVER_QUIET,\n\t});\n\n\tdebug(`npx temp dir`, kleur.yellow(prefix));\n\tconst resolved = require.resolve(packageName, {\n\t\tpaths: [\n\t\t\tpath.join(prefix, \"lib\", \"node_modules\"),\n\t\t\tpath.join(prefix, \"lib64\", \"node_modules\"),\n\t\t],\n\t});\n\n\tdebug(`package: %s`, kleur.yellow(resolved));\n\tdebug(`resolved: %s`, kleur.yellow(resolved));\n\n\tif (!resolved) {\n\t\tthrow Error(`npx failed resolving ${packageName}`);\n\t}\n\n\tdebug(`+++ %s`, resolved);\n\treturn resolved;\n}\n","import kleur from \"kleur\";\n\n/**\n * Pretty Error messages\n */\nexport function printError(message: string) {\n\tconsole.log();\n\tconsole.error(kleur.bold().red(message));\n\tconsole.log();\n}\n","/**\n * Process an array of strings, feeding into a function, that resolves promises in series.\n *\n * @link https://stackoverflow.com/a/29906506\n */\nexport async function promiseSeries<T>(\n\tarray: string[],\n\tfn: (arrItem: string) => Promise<T>\n) {\n\tconst results = {} as Record<string, T>;\n\n\tfor (let i = 0; i < array.length; i++) {\n\t\tconst currItem = array[i];\n\t\tconst r = await fn(currItem);\n\n\t\tresults[currItem] = r;\n\t}\n\n\treturn results; // will be resolved value of promise\n}\n\n/**\n * Executes promise-returning thunks in series until one is resolved\n */\nexport async function promiseFirst<T>(\n\tthunks: Array<(() => Promise<T>) | (() => T)>,\n\terrors: Error[] = []\n): Promise<T> {\n\tif (thunks.length === 0) {\n\t\tthrow new Error(`None of the ${errors.length} thunks resolved.\n\n${errors.join(\"\\n\")}`);\n\t}\n\n\tconst [thunk, ...rest] = thunks;\n\ttry {\n\t\treturn await thunk();\n\t} catch (error) {\n\t\treturn promiseFirst(rest, [...errors, error as Error]);\n\t}\n}\n","import fs from \"fs\";\nimport kleur from \"kleur\";\nimport path from \"path\";\n\nimport { mrmDebug } from \"../index\";\nimport { promiseFirst } from \"./promises\";\n\n/**\n * Curried version of the Array#join method\n */\nexport const join = (sep: string, items: string[]) => items.join(sep);\n\n/**\n * Find the longest string in an array\n */\nexport function longest(input: string[]): string {\n\treturn input.reduce((a, b) => (a.length > b.length ? a : b), \"\");\n}\n\n/**\n * Returns the correct `mrm-` prefixed package name\n */\nexport function getPackageName(\n\ttype: \"task\" | \"preset\",\n\tpackageName: string\n): string {\n\tconst [scopeOrTask, scopedTaskName] = packageName.split(\"/\");\n\treturn scopedTaskName\n\t\t? `${scopeOrTask}/mrm-${type}-${scopedTaskName}`\n\t\t: `mrm-${type}-${scopeOrTask}`;\n}\n\n/**\n * Try to load a file from a list of folders.\n */\nexport async function tryFile(\n\tdirectories: string[],\n\tfilename: string\n): Promise<string> {\n\tconst debug = mrmDebug.extend(\"tryFile\");\n\tdebug(\"trying for %s\", kleur.cyan(filename));\n\n\ttry {\n\t\treturn promiseFirst(\n\t\t\tdirectories.map(dir => {\n\t\t\t\tdebug(\"entering %s\", kleur.yellow(dir));\n\t\t\t\tconst filepath = path.resolve(dir, filename);\n\n\t\t\t\treturn async (): Promise<string> => {\n\t\t\t\t\tawait fs.promises.access(filepath);\n\t\t\t\t\tdebug(\"\\\\ found: %s\", kleur.cyan(filepath));\n\t\t\t\t\treturn filepath;\n\t\t\t\t};\n\t\t\t})\n\t\t);\n\t} catch (err) {\n\t\tthrow new Error(`File \"${filename}\" not found.`);\n\t}\n}\n","import { createRequire } from \"node:module\";\n\nimport { CONFIG_FILENAME } from \"../constants\";\nimport type { CliArgs, MrmOptions } from \"../types/mrm\";\nimport { tryFile } from \"./utils\";\n\n/**\n * Load the configuration from file and command line\n */\nexport async function getConfig(\n\tdirectories: string[],\n\targv: CliArgs\n): Promise<MrmOptions> {\n\tconst configFromFile = await getConfigFromFile(directories);\n\n\treturn {\n\t\t...configFromFile,\n\t\t...getConfigFromCommandLine(argv),\n\t} as MrmOptions;\n}\n\n/**\n * Find and load config file.\n */\nexport async function getConfigFromFile(\n\tdirectories: string[]\n): Promise<Partial<MrmOptions>> {\n\tconst require = createRequire(import.meta.url);\n\n\ttry {\n\t\tconst filepath = await tryFile(directories, CONFIG_FILENAME);\n\n\t\treturn require(filepath);\n\t} catch (err) {\n\t\treturn {};\n\t}\n}\n\n/**\n * Get config options from command line, passed as --config:foo bar.\n */\nexport function getConfigFromCommandLine(argv: CliArgs) {\n\tconst options = {} as Partial<MrmOptions>;\n\n\tfor (const [value, key] of Object.entries(argv)) {\n\t\tif (key.startsWith(\"config:\")) {\n\t\t\toptions[key.replace(/^config:/, \"\")] = value;\n\t\t}\n\t}\n\n\treturn options;\n}\n","/**\n * Turn a list of items into a natural, readable list\n *\n * Code adapted from `lisitify`\n * @link https://github.com/ljharb/listify\n */\nexport function toNaturalList(\n\tlist: string[],\n\tseparator = \",\",\n\tfinalWord = \"and\"\n): string {\n\tif (!Array.isArray(list)) {\n\t\tthrow new TypeError(\"requires an array\");\n\t}\n\n\t// space for last value\n\tif (finalWord.length > 0) {\n\t\tfinalWord += \" \";\n\t}\n\n\tconst trimmed = list.filter(item => item.trim());\n\n\tlet str;\n\n\tif (trimmed.length === 2 && finalWord.length > 0) {\n\t\tstr = trimmed.join(\" \" + finalWord);\n\t} else if (trimmed.length < 3) {\n\t\tstr = trimmed.join(separator);\n\t} else {\n\t\tconst head = trimmed.slice(0, -1);\n\t\tconst tail = finalWord + trimmed[trimmed.length - 1];\n\n\t\tstr = [head, tail].join(separator);\n\t}\n\n\treturn str;\n}\n","import updateNotifier from \"update-notifier\";\n\nimport packageJson from \"../../package.json\" assert { type: \"json\" };\nimport { cliDebug } from \"../cli\";\n\n/**\n * Check for newer versions of the tool\n */\nexport function runUpdater() {\n\tconst notifier = updateNotifier({ pkg: packageJson });\n\n\tcliDebug(\"current pkg version: %s\", notifier.update?.current);\n\tcliDebug(\"latest pkg version: %s\", notifier.update?.latest);\n\n\treturn notifier.notify();\n}\n"],"mappings":"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","names":["import_kleur","path","envPaths","import_kleur","import_node_module","require","kleur","glob","path","module","import_kleur","import_promises","import_node_module","import_node_path","import_kleur","kleur","import_kleur","import_path","kleur","path","fs","import_meta","require","path","which","npx","kleur","import_meta","require","task","kleur","module","inquirer","Debug","import_node_module","import_meta","require","updateNotifier","packageJson","ora","minimist","kleur"]}